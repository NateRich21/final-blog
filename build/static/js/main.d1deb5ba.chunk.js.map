{"version":3,"sources":["logo.svg","Components/CreatePost/CreatePost.js","Components/PostList/PostList.js","Components/Nav/Nav.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","CreatePost","React","useState","name","title","content","state","setState","handleChange","evt","value","target","className","id","type","onChange","placeholder","PostList","Nav","to","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,uOCoD5BC,MAjDf,WAAuB,IAAD,EAGMC,IAAMC,SAAS,CACxCC,KAAM,GACNC,MAAO,GACPC,QAAS,KANU,mBAGbC,EAHa,KAGNC,EAHM,KASrB,SAASC,EAAaC,GACpB,IAAMC,EAAQD,EAAIE,OAAOD,MACzBH,EAAS,eACHD,EADE,eAEJG,EAAIE,OAAOR,KAAOO,KAIxB,OACC,yBAAKE,UAAU,aACd,yBAAKC,GAAG,QACP,2BACCC,KAAK,OACLJ,MAAOJ,EAAMH,KACbY,SAAUP,EACVL,KAAK,OACLU,GAAG,OACHG,YAAY,eAEd,yBAAKH,GAAG,SACP,2BACCC,KAAK,OACLJ,MAAOJ,EAAMF,MACbW,SAAUP,EACVL,KAAK,QACLa,YAAY,4BAEd,yBAAKH,GAAG,WACP,2BACCC,KAAK,OACLJ,MAAOJ,EAAMD,QACbU,SAAUP,EACVL,KAAK,UACLa,YAAY,4B,MClCFC,MARf,WACC,OACC,yBAAKL,UAAU,OACf,4CCiBaM,MAhBf,WACC,OACC,6BACC,oCACA,wBAAIN,UAAU,aACb,kBAAC,IAAD,CAAMO,GAAG,gBACR,4CAED,kBAAC,IAAD,CAAMA,GAAG,cACR,8CCSL,IAAMC,EAAO,WACZ,OAAO,qCAGOC,EAnBf,WACC,OACC,kBAAC,IAAD,KACC,yBAAKT,UAAU,OACf,kBAAC,EAAD,MACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,eAAeE,UAAWxB,IACtC,kBAAC,IAAD,CAAOsB,KAAK,aAAaE,UAAWP,QCNrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1deb5ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './CreatePost.css';\r\n\r\nfunction CreatePost() {\r\n\r\n\r\n\t\tconst [state, setState] = React.useState({\r\n\t\t\tname: '',\r\n\t\t\ttitle: '',\r\n\t\t\tcontent: ''\r\n\t\t});\r\n\r\n\tfunction handleChange(evt) {\r\n\t \tconst value = evt.target.value;\r\n\t \tsetState({\r\n\t   \t\t...state,\r\n\t    \t[evt.target.name]: value\r\n\t  \t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"post-form\">\r\n\t\t\t<div id='name'>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={state.name}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tname='name'\r\n\t\t\t\t\tid='name'\r\n\t\t\t\t\tplaceholder='Your name'/>\r\n\t\t\t</div>\r\n\t\t\t<div id='title'>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={state.title}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tname='title'\r\n\t\t\t\t\tplaceholder='The title of your post' />\r\n\t\t\t</div>\r\n\t\t\t<div id='content'>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={state.content}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tname='content'\r\n\t\t\t\t\tplaceholder='Write your post here'/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CreatePost;\r\n","import React from 'react';\r\nimport './PostList.css';\r\n\r\nfunction PostList() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t<h1>View Posts</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\r\nimport './Nav.css';\r\nimport CreatePost from '../CreatePost/CreatePost';\r\nimport PostList from '../PostList/PostList';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Nav() {\r\n\treturn (\r\n\t\t<nav>\r\n\t\t\t<h3>Logo</h3>\r\n\t\t\t<ul className='nav-links'>\r\n\t\t\t\t<Link to='/create-post'>\r\n\t\t\t\t\t<li>Create Post</li>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<Link to='/post-list'>\r\n\t\t\t\t\t<li>View Posts</li>\r\n\t\t\t\t</Link>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport logo from '../../logo.svg';\r\nimport './App.css';\r\n\r\nimport Nav from '../Nav/Nav';\r\nimport PostList from './../PostList/PostList.js';\r\nimport CreatePost from './../CreatePost/CreatePost.js';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t<Nav />\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path='/' exact component={Home} />\r\n\t\t\t\t\t<Route path='/create-post' component={CreatePost} />\r\n\t\t\t\t\t<Route path='/post-list' component={PostList} />\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n}\r\n\r\nconst Home = () => {\r\n\treturn <h1>Home</h1>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}